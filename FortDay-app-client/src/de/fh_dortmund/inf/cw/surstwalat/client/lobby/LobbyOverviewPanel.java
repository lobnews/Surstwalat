/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.fh_dortmund.inf.cw.surstwalat.client.lobby;

import de.fh_dortmund.inf.cw.surstwalat.client.MainFrame;
import de.fh_dortmund.inf.cw.surstwalat.client.event.EventHandler;
import de.fh_dortmund.inf.cw.surstwalat.client.event.EventListener;
import de.fh_dortmund.inf.cw.surstwalat.client.event.events.GameCreatedEvent;
import de.fh_dortmund.inf.cw.surstwalat.client.event.events.GameStartedEvent;
import de.fh_dortmund.inf.cw.surstwalat.client.event.events.UserEvent;
import de.fh_dortmund.inf.cw.surstwalat.client.event.events.UserJoinGameEvent;
import de.fh_dortmund.inf.cw.surstwalat.client.user.UserManagementHandler;
import de.fh_dortmund.inf.cw.surstwalat.common.exceptions.GameIsFullException;
import de.fh_dortmund.inf.cw.surstwalat.common.model.Account;
import de.fh_dortmund.inf.cw.surstwalat.common.model.Game;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Stephan Klimek
 */
public class LobbyOverviewPanel extends JPanel {

    private final UserManagementHandler userManager;

    /**
     * Creates new form LobbyOverviewPanel
     */
    public LobbyOverviewPanel() {
	userManager = UserManagementHandler.getInstance();

	initComponents();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        playerTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        openGamesTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        playerTable.setModel(new PlayerTableModel());
        jScrollPane1.setViewportView(playerTable);

        openGamesTable.setModel(new GameTableModel());
        jScrollPane2.setViewportView(openGamesTable);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel1.setText("FortDay - Game Lobby");

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        jLabel2.setText("Spielerliste");

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        jLabel3.setText("Offene Spiele");

        jButton1.setText("Spiel beitreten");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setLabel("Spiel erstellen");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(20, 20, 20)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(11, 11, 11)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE))
                .addGap(17, 17, 17))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
	int row = openGamesTable.getSelectedRow();
        int gameId = (int) openGamesTable.getModel().getValueAt(row, 0);
	try {
	    userManager.joinGame(gameId);
	} catch (GameIsFullException ex) {
	    Logger.getLogger(LobbyOverviewPanel.class.getName()).log(Level.SEVERE, "Das Spiel ist bereits voll.");
	}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
	userManager.createGame();
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable openGamesTable;
    private javax.swing.JTable playerTable;
    // End of variables declaration//GEN-END:variables

//    /**
//     * Fill PlayerTable
//     */
//    private void fillPlayerTable() {
//	List<Account> playerList = userManager.getUserInLobby();
//
//	String[] playerColName = new String[]{"Spieler-ID", "Name", "E-Mail"};
//	String[][] playerRow = new String[playerList.size()][playerColName.length];
//
//	for (int i = 0; i < playerList.size(); i++) {
//	    String[] playerArray = new String[playerColName.length];
//	    playerArray[0] = Integer.toString(playerList.get(i).getId());
//	    playerArray[1] = playerList.get(i).getName();
//	    playerArray[2] = playerList.get(i).getEmail();
//	    playerRow[i] = playerArray;
//	}
//
//	DefaultTableModel playerTableModel = new DefaultTableModel(playerRow, playerColName);
//	playerTable.setModel(playerTableModel);
//
//    }
//
//    /**
//     * Fill open games table
//     */
//    private void fillOpenGamesTable() {
//	List<Game> openGamesList = userManager.getOpenGames();
//
//	String[] openGamesColName = new String[]{"Spiel-ID", "AI-Spieler", "Aktuelle Runde"};
//	String[][] openGamesRow = new String[openGamesList.size()][openGamesColName.length];
//
//	for (int i = 0; i < openGamesList.size(); i++) {
//	    String[] openGameArray = new String[openGamesColName.length];
//	    openGameArray[0] = Integer.toString(openGamesList.get(i).getId());
//	    openGameArray[1] = Integer.toString(openGamesList.get(i).getAiPlayerCount());
//	    openGameArray[2] = Integer.toString(openGamesList.get(i).getCurrentRound());
//	    openGamesRow[i] = openGameArray;
//	}
//
//	DefaultTableModel openGamesTableModel = new DefaultTableModel(openGamesRow, openGamesColName);
//	openGamesTable.setModel(openGamesTableModel);
//    }
    
    private class GameTableModel implements TableModel, EventListener {

        private List<Game> games;
        
        public GameTableModel() {
            games = userManager.getOpenGames();
        }
        
        @Override
        public int getRowCount() {
            return games.size();
        }

        @Override
        public int getColumnCount() {
            return 3;
        }

        @Override
        public String getColumnName(int columnIndex) {
            switch(columnIndex) {
                case 0: return "Spiel-ID";
                case 1: return "AI-Spieler";
                case 2: return "Aktuelle Runde";
                default: return "";
            }
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            switch(columnIndex) {
                case 0:
                case 1: return Integer.class;
                default: return String.class;
            }
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Game g = games.get(rowIndex);
            switch(columnIndex) {
                case 0: return g.getId();
                case 1: return g.getAiPlayerCount();
                case 2: return g.getCurrentRound();
                default: return "";
            }
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {}

        @Override
        public void addTableModelListener(TableModelListener l) {}

        @Override
        public void removeTableModelListener(TableModelListener l) {}
        
        @EventHandler
        public void onGameCreate(GameCreatedEvent e) {
            games = userManager.getOpenGames();
            LobbyOverviewPanel.this.revalidate();
        }
        
        @EventHandler
        public void onUserLeave(GameStartedEvent e) {
            games = userManager.getOpenGames();
            LobbyOverviewPanel.this.revalidate();
        }
        
        @EventHandler
        public void onUserJoinGame(UserJoinGameEvent e) {
            games = userManager.getOpenGames();
            LobbyOverviewPanel.this.revalidate();
        }
        
    }
    
    private class PlayerTableModel implements TableModel, EventListener {
        
        private List<Account> accounts;
        
        public PlayerTableModel() {
            accounts = userManager.getUsersInOpenGame(MainFrame.getInstance().getGameId());
            MainFrame.getInstance().getEventManager().registerListener(this);
        }
        
        @Override
        public int getRowCount() {
            return accounts.size();
        }

        @Override
        public int getColumnCount() {
            return 3;
        }

        @Override
        public String getColumnName(int columnIndex) {
            switch(columnIndex) {
                case 0: return "Spieler-ID";
                case 1: return "Name";
                case 2: return "E-Mail";
                default: return "";
            }
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            switch(columnIndex) {
                case 0: return Integer.class;
                default: return String.class;
            }
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Account a = accounts.get(rowIndex);
            switch(columnIndex) {
                case 0: return a.getId();
                case 1: return a.getName();
                case 2: return a.getEmail();
                default: return "";
            }
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {}

        @Override
        public void addTableModelListener(TableModelListener l) {}

        @Override
        public void removeTableModelListener(TableModelListener l) {}
        
        @EventHandler
        public void onUserJoin(UserEvent e) {
            accounts = userManager.getUsersInOpenGame(MainFrame.getInstance().getGameId());
            LobbyOverviewPanel.this.revalidate();
        }
        
    }
}
